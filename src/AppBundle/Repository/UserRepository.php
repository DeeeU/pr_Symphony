<?php

namespace AppBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{

  /**
   * @params string $email
   * @return User|null
   */
  public function findByEmail($email) {
    return $this->createQueryResult('u')
                ->where('u.email = :email')
                ->setParameter('email', $email)
                ->getQuery()
                ->getOneOrNullResult();
  }

  /**
   * @params string|null $keyword
   * @return \Doctrine\ORM\QueryBuilder
   */
  public function createSearchQueryBuilder($keyword = null) {
    $query = $this -> createQueryBuilder('u')
                   -> orderBy('u.createdAt', DESC);
    if ($keyword) {
      $query->andWhere('u.name like :keyword or u.email like :keyword')
            ->setParameter('keyword', '%' . $keyword . '%');
    }

    return $query;
  }

  /**
   * @return array
   */
  public function findUsersWithMemos() {
    return $this->createQueryBuilder('u')
                ->select('u', 'count(m.id as memo_count')
                ->leftJoin('u.memos', 'm')
                ->groupBy('u.id')
                ->having('memo_count > 0')
                ->orderBy('u.name', 'ASC')
                ->getQuery()
                ->getResult();
  }

  /**
   * 最近登録されたユーザーを取得
   *
   * @param int $limit
   * @return array
   */
  public function findRecentUsers($limit = 10)
  {
      return $this->createQueryBuilder('u')
                  ->orderBy('u.createdAt', 'DESC')
                  ->setMaxResults($limit)
                  ->getQuery()
                  ->getResult();
  }

  /**
   * メモ数付きでユーザー一覧を取得
   *
   * @return array
   */
  public function getUsersWithMemoCount()
  {
      return $this->createQueryBuilder('u')
                  ->select('u', 'count(m.id) as memo_count')
                  ->leftJoin('u.memos', 'm')
                  ->groupBy('u.id')
                  ->orderBy('u.name', 'ASC')
                  ->getQuery()
                  ->getResult();
  }
}
